from collections import UserDict
from datetime import datetime
import json
class Field:
    def __init__(self, value):
        self._value = value

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_value):
        self._value = new_value

    def __str__(self):
        return str(self._value)


class Name(Field):
    pass


class Phone(Field):
    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_value):
        if not (new_value.isdigit() and len(new_value) == 10):
            raise ValueError("Неверный формат номера телефона")
        self._value = new_value


class Birthday(Field):
    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_value):
        if new_value:
            try:
                new_value = datetime.strptime(new_value, '%Y-%m-%d').date()
            except ValueError:
                raise ValueError("Неверный формат дня рождения")
        self._value = new_value


class Record:
    def __init__(self, name, birthday=None):
        self._name = Name(name)
        self._phones = []
        self._birthday = Birthday(birthday)

    @property
    def name(self):
        return self._name

    @property
    def phones(self):
        return self._phones

    @property
    def birthday(self):
        return self._birthday

    @birthday.setter
    def birthday(self, new_birthday):
        self._birthday.value = new_birthday

    def add_phone(self, phone):
        phone_obj = Phone(phone)
        self._phones.append(phone_obj)

    def remove_phone(self, phone):
        self._phones = [p for p in self._phones if p.value != phone]

    def edit_phone(self, old_phone, new_phone):
        index = next((i for i, phone in enumerate(self._phones) if phone.value == old_phone), None)

        if index is not None:
            self._phones[index].value = new_phone
        else:
            raise ValueError(f"Номер телефона '{old_phone}' не найден для редактирования")

    def find_phone(self, phone):
        return next((p for p in self._phones if p.value == phone), None)

    def days_to_birthday(self):
        if not self._birthday.value:
            return None

        today = datetime.today()
        next_birthday = datetime(today.year, self._birthday.value.month, self._birthday.value.day)

        if today > next_birthday:
            next_birthday = datetime(today.year + 1, self._birthday.value.month, self._birthday.value.day)

        days_left = (next_birthday - today).days
        return days_left

    def __str__(self):
        return f"Контакт: {self._name.value}, телефоны: {'; '.join(str(p) for p in self._phones)}"


class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def iterator(self, N=5):
        records = list(self.data.values())
        for i in range(0, len(records), N):
            yield records[i:i + N]

    def save_to_file(self, filename):
        with open(filename, 'w') as file:
            data_to_save = []
            for record in self.data.values():
                data_to_save.append({
                    'name': record.name.value,
                    'phones': [phone.value for phone in record.phones],
                    'birthday': str(record.birthday.value) if record.birthday.value else None
                })
            json.dump(data_to_save, file)

    def load_from_file(self, filename):
        with open(filename, 'r') as file:
            data = json.load(file)
            for record_data in data:
                record = Record(record_data['name'], record_data['birthday'])
                for phone in record_data['phones']:
                    record.add_phone(phone)
                self.add_record(record)

    def search(self, query):
        query = query.lower()
        return [record for record in self.data.values() if any(query in phone.value.lower() or query in record.name.value.lower() for phone in record.phones)]

def main():
    # Створення екземпляру адресної книги
    address_book = AddressBook()

    # Додавання записей у адресну книгу
    record1 = Record(name="John Doe", birthday="1990-01-01")
    record1.add_phone("1234567890")
    address_book.add_record(record1)

    record2 = Record(name="Jane Smith", birthday="1985-05-15")
    record2.add_phone("9876543210")
    address_book.add_record(record2)

    # Пошук за іменем
    search_results = address_book.search("John")
    for result in search_results:
        print(result)

    # Збереження адресної книги у файл
    address_book.save_to_file("address_book.json")

    # Завантаження адресної книги з файлу
    new_address_book = AddressBook()
    new_address_book.load_from_file("address_book.json")

    # Вивід збережених записів
    for name, record in new_address_book.items():
        print(
            f"Name: {record.name.value}, Phones: {[phone.value for phone in record.phones]}, Birthday: {record.birthday.value}")


if __name__ == "__main__":
        main()
