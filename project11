from collections import UserDict
from datetime import datetime

class Field:
    def __init__(self, value):
        self._value = value

    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_value):
        self._value = new_value

    def __str__(self):
        return str(self._value)


class Name(Field):
    pass


class Phone(Field):
    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_value):
        if not (new_value.isdigit() and len(new_value) == 10):
            raise ValueError("Неверный формат номера телефона")
        self._value = new_value


class Birthday(Field):
    @property
    def value(self):
        return self._value

    @value.setter
    def value(self, new_value):
        if new_value:
            try:
                new_value = datetime.strptime(new_value, '%Y-%m-%d').date()
            except ValueError:
                raise ValueError("Неверный формат дня рождения")
        self._value = new_value


class Record:
    def __init__(self, name, birthday=None):
        self._name = Name(name)
        self._phones = []
        self._birthday = Birthday(birthday)

    @property
    def name(self):
        return self._name

    @property
    def phones(self):
        return self._phones

    @property
    def birthday(self):
        return self._birthday

    @birthday.setter
    def birthday(self, new_birthday):
        self._birthday.value = new_birthday

    def add_phone(self, phone):
        phone_obj = Phone(phone)
        self._phones.append(phone_obj)

    def remove_phone(self, phone):
        self._phones = [p for p in self._phones if p.value != phone]

    def edit_phone(self, old_phone, new_phone):
        index = next((i for i, phone in enumerate(self._phones) if phone.value == old_phone), None)

        if index is not None:
            self._phones[index].value = new_phone
        else:
            raise ValueError(f"Номер телефона '{old_phone}' не найден для редактирования")

    def find_phone(self, phone):
        return next((p for p in self._phones if p.value == phone), None)

    def days_to_birthday(self):
        if not self._birthday.value:
            return None

        today = datetime.today()
        next_birthday = datetime(today.year, self._birthday.value.month, self._birthday.value.day)

        if today > next_birthday:
            next_birthday = datetime(today.year + 1, self._birthday.value.month, self._birthday.value.day)

        days_left = (next_birthday - today).days
        return days_left

    def __str__(self):
        return f"Контакт: {self._name.value}, телефоны: {'; '.join(str(p) for p in self._phones)}"


class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def iterator(self, N=5):
        records = list(self.data.values())
        for i in range(0, len(records), N):
            yield records[i:i + N]
